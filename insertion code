#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*next;	
};
void traveres(struct node*ptr){
while(ptr!=NULL){
	printf("Elements=%d\n",ptr->data);
	ptr=ptr->next;
}
}
//insertion at Beginning-----

/*struct node*insertfirst(struct node*head,int data){
	struct node*ptr=(struct node*)malloc(sizeof(struct node));
	ptr->next=head;
	ptr->data=data;
	return ptr;
}*/

//insertion in between-----

/*struct node*insertindex(struct node*head,int data,int index){
struct node*ptr=(struct node*)malloc(sizeof(struct node));	
struct node*p=head;
int i=0;
while(i!=index-1){
	p=p->next;
	i++;
}
ptr->data=data;
ptr->next=p->next;
p->next=ptr;
return head;
}*/

//insertion at END-------

/*struct node*insertend(struct node*head,int data){
struct node*ptr=(struct node*)malloc(sizeof(struct node));	
ptr->data=data;
struct node*p=head;
while(p->next!=NULL){
	p=p->next;
}
p->next=ptr;
ptr->next=NULL;
return head;
}*/

//insertion After NODE

struct node*insertafter(struct node*head,struct node*prenode,int data){
struct node*ptr=(struct node*)malloc(sizeof(struct node));	
ptr->data=data;
ptr->next=prenode->next;
prenode->next=ptr;
return head;
}

int main(){
	struct node*head;
	struct node*second;
	struct node*third;
	struct node*fourth;
	struct node*fifth;

	head=(struct node*)malloc(sizeof(struct node));
	second=(struct node*)malloc(sizeof(struct node));
	third=(struct node*)malloc(sizeof(struct node));
	fourth=(struct node*)malloc(sizeof(struct node));
	fifth=(struct node*)malloc(sizeof(struct node));
	
	//linking head and second node
	head->data=7;
	head->next=second;

	second->data=11;
	second->next=third;
   //linking third with fourth
	third->data=44;
	third->next=fourth;
  //linking fourth with fifth
    fourth->data=33;
    fourth->next=fifth;
  //linking fifth with NULL
    fifth->data=66;
    fifth->next=NULL;
	printf("Before insertion\n");
	traveres(head);
	//head=insertfirst(head,56);
    //head=insertindex(head,49,2);
	 head=insertafter(head,third,2);
	 printf("After insertion\n");
//	 head=insertend(head,21);
	traveres(head);
	
	return 0;
}
